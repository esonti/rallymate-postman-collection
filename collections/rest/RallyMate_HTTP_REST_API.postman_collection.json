{
    "info": {
        "name": "RallyMate HTTP REST API v2 - Complete",
        "description": "Complete HTTP REST API collection for RallyMate services with all endpoints from the latest service implementation.\n\nIMPORTANT ENUM VALUES:\n\n**Membership Roles:**\n- MEMBERSHIP_ROLE_UNSPECIFIED\n- MEMBERSHIP_ROLE_PLAYER  \n- MEMBERSHIP_ROLE_MANAGER\n\n**Lock Actions:**\n- LOCK_ACTION_UNSPECIFIED\n- LOCK\n- UNLOCK\n- STATUS_CHECK\n\n**Lock States:**\n- LOCK_STATE_UNSPECIFIED\n- LOCKED\n- UNLOCKED\n- JAMMED\n\n**Camera Actions:**\n- CAMERA_ACTION_UNSPECIFIED\n- START_LIVE_STREAM\n- STOP_LIVE_STREAM\n- START_RECORD\n- STOP_RECORD\n- STATUS_CHECK\n\n**Connection Status (for locks, cameras, bridges):**\n- UNKNOWN\n- CONNECTED\n- DISCONNECTED\n- DEGRADED",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "auth": {
        "type": "bearer",
        "bearer": [
            {
                "key": "token",
                "value": "{{session_token}}",
                "type": "string"
            }
        ]
    },
    "item": [
        {
            "name": "00 - Health Check",
            "item": [
                {
                    "name": "Health Check",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/health",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "health"
                            ]
                        },
                        "description": "Check if the service is healthy"
                    }
                }
            ],
            "description": "Health check endpoints"
        },
        {
            "name": "01 - Authentication",
            "item": [
                {
                    "name": "Send OTP",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has success true\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"phone_number\": \"{{test_phone_number}}\",\n    \"device_info\": \"Postman Test Client\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/auth/otp/send",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "auth",
                                "otp",
                                "send"
                            ]
                        },
                        "description": "Send OTP to phone number for authentication"
                    }
                },
                {
                    "name": "Verify OTP (Login)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has success true\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "});",
                                    "",
                                    "// Auto-populate session variables",
                                    "if (pm.response.code === 200) {",
                                    "    var jsonData = pm.response.json();",
                                    "    if (jsonData.session && jsonData.session.session_token) {",
                                    "        pm.environment.set(\"session_token\", jsonData.session.session_token);",
                                    "    }",
                                    "    if (jsonData.session && jsonData.session.refresh_token) {",
                                    "        pm.environment.set(\"refresh_token\", jsonData.session.refresh_token);",
                                    "    }",
                                    "    if (jsonData.session && jsonData.session.user_id) {",
                                    "        pm.environment.set(\"user_id\", jsonData.session.user_id);",
                                    "    }",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"phone_number\": \"{{test_phone_number}}\",\n    \"otp_code\": \"{{test_otp_code}}\",\n    \"device_info\": \"Postman Test Client\",\n    \"ip_address\": \"127.0.0.1\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/auth/otp/verify",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "auth",
                                "otp",
                                "verify"
                            ]
                        },
                        "description": "Verify OTP and get session token"
                    }
                },
                {
                    "name": "Get Current Session",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/auth/session/current",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "auth",
                                "session",
                                "current"
                            ]
                        },
                        "description": "Get current session information"
                    }
                },
                {
                    "name": "Refresh Session",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"refresh_token\": \"{{refresh_token}}\",\n    \"device_info\": \"Postman Test Client\",\n    \"ip_address\": \"127.0.0.1\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/auth/session/refresh",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "auth",
                                "session",
                                "refresh"
                            ]
                        },
                        "description": "Refresh session using refresh token"
                    }
                },
                {
                    "name": "Validate Session",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"session_token\": \"{{session_token}}\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/auth/session/validate",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "auth",
                                "session",
                                "validate"
                            ]
                        },
                        "description": "Validate if session token is still valid"
                    }
                },
                {
                    "name": "Revoke Session",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"session_token\": \"{{session_token}}\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/auth/session/revoke",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "auth",
                                "session",
                                "revoke"
                            ]
                        },
                        "description": "Revoke a specific session"
                    }
                },
                {
                    "name": "Get User Sessions",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/auth/sessions/{{user_id}}?page=1&page_size=10",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "auth",
                                "sessions",
                                "{{user_id}}"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "page_size",
                                    "value": "10"
                                }
                            ]
                        },
                        "description": "Get all sessions for a user"
                    }
                },
                {
                    "name": "Logout",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/auth/logout",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "auth",
                                "logout"
                            ]
                        },
                        "description": "Logout from current session"
                    }
                },
                {
                    "name": "Logout From All Devices",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/auth/logout-all",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "auth",
                                "logout-all"
                            ]
                        },
                        "description": "Logout from all devices/sessions"
                    }
                },
                {
                    "name": "Admin Logout User",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"phone_number\": \"{{test_phone_number}}\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/auth/logout-user",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "auth",
                                "logout-user"
                            ]
                        },
                        "description": "Admin endpoint to logout a user from all devices"
                    }
                },
                {
                    "name": "Send OTC (Device)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has success true\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"device_id\": \"{{test_device_id}}\",\n    \"device_info\": \"IoT Camera v1.0\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/auth/otc/send",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "auth",
                                "otc",
                                "send"
                            ]
                        },
                        "description": "Send OTC to facility managers for device authentication"
                    }
                },
                {
                    "name": "Verify OTC (Device)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has success true\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "});",
                                    "",
                                    "// Auto-populate device session variables",
                                    "if (pm.response.code === 200) {",
                                    "    var jsonData = pm.response.json();",
                                    "    if (jsonData.session && jsonData.session.session_token) {",
                                    "        pm.environment.set(\"device_session_token\", jsonData.session.session_token);",
                                    "    }",
                                    "    if (jsonData.session && jsonData.session.refresh_token) {",
                                    "        pm.environment.set(\"device_refresh_token\", jsonData.session.refresh_token);",
                                    "    }",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"device_id\": \"{{test_device_id}}\",\n    \"otc_code\": \"{{test_otc_code}}\",\n    \"device_info\": \"IoT Camera v1.0\",\n    \"ip_address\": \"192.168.1.100\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/auth/otc/verify",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "auth",
                                "otc",
                                "verify"
                            ]
                        },
                        "description": "Verify OTC and get device session token"
                    }
                },
                {
                    "name": "Get Device Sessions",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has sessions array\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.sessions).to.be.an('array');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/auth/device-sessions?device_id={{test_device_id}}&page=1&page_size=20",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "auth",
                                "device-sessions"
                            ],
                            "query": [
                                {
                                    "key": "device_id",
                                    "value": "{{test_device_id}}"
                                },
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "page_size",
                                    "value": "20"
                                }
                            ]
                        },
                        "description": "Get paginated list of device sessions"
                    }
                }
            ],
            "description": "Authentication endpoints with OTP flow and session management"
        },
        {
            "name": "02 - Users",
            "item": [
                {
                    "name": "Get User Profile",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/users/profile",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "users",
                                "profile"
                            ]
                        },
                        "description": "Get current user's profile"
                    }
                },
                {
                    "name": "Update User Profile",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"Updated User Name\",\n    \"email\": \"updated.email@example.com\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/users/profile",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "users",
                                "profile"
                            ]
                        },
                        "description": "Update current user's profile"
                    }
                },
                {
                    "name": "Get All Users (Admin/Manager)",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/users?page=1&page_size=10",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "users"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "page_size",
                                    "value": "10"
                                },
                                {
                                    "key": "facility_id",
                                    "value": "{{created_facility_id}}",
                                    "disabled": true
                                },
                                {
                                    "key": "role",
                                    "value": "MEMBERSHIP_ROLE_PLAYER",
                                    "disabled": true
                                },
                                {
                                    "key": "search",
                                    "value": "test",
                                    "disabled": true
                                }
                            ]
                        },
                        "description": "Get all users with optional filtering. Available roles: MEMBERSHIP_ROLE_UNSPECIFIED, MEMBERSHIP_ROLE_PLAYER, MEMBERSHIP_ROLE_MANAGER"
                    }
                },
                {
                    "name": "Create User (Admin)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Store created user ID",
                                    "if (pm.response.code === 200) {",
                                    "    var jsonData = pm.response.json();",
                                    "    if (jsonData.user && jsonData.user.id) {",
                                    "        pm.environment.set(\"created_user_id\", jsonData.user.id);",
                                    "    }",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"phone_number\": \"+1555123456\",\n    \"name\": \"Test User\",\n    \"email\": \"testuser@example.com\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/users",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "users"
                            ]
                        },
                        "description": "Create a new user (admin only)"
                    }
                },
                {
                    "name": "Update User (Admin)",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"Updated Test User\",\n    \"email\": \"updated.testuser@example.com\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/users/{{created_user_id}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "users",
                                "{{created_user_id}}"
                            ]
                        },
                        "description": "Update a user (admin only)"
                    }
                },
                {
                    "name": "Delete User (Admin)",
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/users/{{created_user_id}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "users",
                                "{{created_user_id}}"
                            ]
                        },
                        "description": "Delete a user (admin only)"
                    }
                },
                {
                    "name": "Create Membership by Phone",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Store created membership ID",
                                    "if (pm.response.code === 200) {",
                                    "    var jsonData = pm.response.json();",
                                    "    if (jsonData.membership && jsonData.membership.id) {",
                                    "        pm.environment.set(\"created_membership_id\", jsonData.membership.id);",
                                    "    }",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"phone_number\": \"+1555987654\",\n    \"facility_id\": {{created_facility_id}},\n    \"role\": \"MEMBERSHIP_ROLE_PLAYER\",\n    \"expiry_date\": \"2025-12-31T23:59:59Z\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/users/memberships/phone",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "users",
                                "memberships",
                                "phone"
                            ]
                        },
                        "description": "Create membership by phone number. Available roles: MEMBERSHIP_ROLE_PLAYER, MEMBERSHIP_ROLE_MANAGER"
                    }
                },
                {
                    "name": "Create Membership by User ID",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"user_id\": {{created_user_id}},\n    \"facility_id\": {{created_facility_id}},\n    \"role\": \"MEMBERSHIP_ROLE_PLAYER\",\n    \"expiry_date\": \"2025-12-31T23:59:59Z\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/users/memberships/userid",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "users",
                                "memberships",
                                "userid"
                            ]
                        },
                        "description": "Create membership by user ID. Available roles: MEMBERSHIP_ROLE_PLAYER, MEMBERSHIP_ROLE_MANAGER"
                    }
                },
                {
                    "name": "Delete Membership",
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/users/memberships/{{created_membership_id}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "users",
                                "memberships",
                                "{{created_membership_id}}"
                            ]
                        },
                        "description": "Delete a membership"
                    }
                }
            ],
            "description": "User management endpoints"
        },
        {
            "name": "03 - Facilities",
            "item": [
                {
                    "name": "Get All Facilities",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/facilities?page=1&page_size=10",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "facilities"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "page_size",
                                    "value": "10"
                                },
                                {
                                    "key": "search",
                                    "value": "test",
                                    "disabled": true
                                },
                                {
                                    "key": "active_only",
                                    "value": "true",
                                    "disabled": true
                                }
                            ]
                        },
                        "description": "Get all facilities"
                    }
                },
                {
                    "name": "Create Facility (Admin)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Store created facility ID",
                                    "if (pm.response.code === 200) {",
                                    "    var jsonData = pm.response.json();",
                                    "    if (jsonData.facility && jsonData.facility.id) {",
                                    "        pm.environment.set(\"created_facility_id\", jsonData.facility.id);",
                                    "    }",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"Test Facility\",\n    \"address\": \"123 Test Street, Test City, TC 12345\",\n    \"description\": \"Test facility created via Postman\",\n    \"timezone\": \"America/New_York\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/facilities",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "facilities"
                            ]
                        },
                        "description": "Create a new facility (admin only)"
                    }
                },
                {
                    "name": "Get Facility by ID",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/facilities/{{created_facility_id}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "facilities",
                                "{{created_facility_id}}"
                            ]
                        },
                        "description": "Get facility details by ID"
                    }
                },
                {
                    "name": "Update Facility",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"Updated Test Facility\",\n    \"description\": \"Updated facility description\",\n    \"timezone\": \"America/New_York\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/facilities/{{created_facility_id}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "facilities",
                                "{{created_facility_id}}"
                            ]
                        },
                        "description": "Update facility"
                    }
                },
                {
                    "name": "Delete Facility (Admin)",
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/facilities/{{created_facility_id}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "facilities",
                                "{{created_facility_id}}"
                            ]
                        },
                        "description": "Delete facility (admin only)"
                    }
                }
            ],
            "description": "Facility management endpoints"
        },
        {
            "name": "04 - Locks",
            "item": [
                {
                    "name": "Register Lock",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Store lock device ID",
                                    "if (pm.response.code === 200) {",
                                    "    var jsonData = pm.response.json();",
                                    "    if (jsonData.lock && jsonData.lock.device_id) {",
                                    "        pm.environment.set(\"lock_device_id\", jsonData.lock.device_id);",
                                    "    }",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"device_id\": \"{{test_lock_device_id}}\",\n    \"facility_id\": {{created_facility_id}},\n    \"name\": \"Main Door Lock\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/locks/register",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "locks",
                                "register"
                            ]
                        },
                        "description": "Register a new lock device"
                    }
                },
                {
                    "name": "Get All Locks",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/locks?facility_id={{created_facility_id}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "locks"
                            ],
                            "query": [
                                {
                                    "key": "facility_id",
                                    "value": "{{created_facility_id}}"
                                },
                                {
                                    "key": "state",
                                    "value": "LOCKED",
                                    "disabled": true
                                },
                                {
                                    "key": "edge_connectivity",
                                    "value": "CONNECTED",
                                    "disabled": true
                                }
                            ]
                        },
                        "description": "Get all locks for a facility. Available states: LOCK_STATE_UNSPECIFIED, LOCKED, UNLOCKED, JAMMED. Available connectivity: UNKNOWN, CONNECTED, DISCONNECTED, DEGRADED"
                    }
                },
                {
                    "name": "Update Lock",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"facility_id\": {{created_facility_id}},\n    \"device_id\": \"{{lock_device_id}}\",\n    \"name\": \"Updated Main Door Lock\",\n    \"firmware_version\": \"1.2.3\",\n    \"edge_connectivity\": \"CONNECTED\",\n    \"state\": \"LOCKED\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/locks/{{lock_device_id}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "locks",
                                "{{lock_device_id}}"
                            ]
                        },
                        "description": "Update lock device information"
                    }
                },
                {
                    "name": "Lock Control (Unlock/Lock)",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"facility_id\": {{created_facility_id}},\n    \"device_id\": \"{{lock_device_id}}\",\n    \"user_id\": {{user_id}},\n    \"action\": \"UNLOCK\",\n    \"reason\": \"User requested access\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/locks/{{lock_device_id}}/control",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "locks",
                                "{{lock_device_id}}",
                                "control"
                            ]
                        },
                        "description": "Control lock (UNLOCK/LOCK/STATUS_CHECK). Available actions: LOCK_ACTION_UNSPECIFIED, LOCK, UNLOCK, STATUS_CHECK"
                    }
                },
                {
                    "name": "Get Lock Activities",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/locks/activities?page=1&page_size=10&facility_id={{created_facility_id}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "locks",
                                "activities"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "page_size",
                                    "value": "10"
                                },
                                {
                                    "key": "facility_id",
                                    "value": "{{created_facility_id}}"
                                },
                                {
                                    "key": "device_id",
                                    "value": "{{lock_device_id}}",
                                    "disabled": true
                                }
                            ]
                        },
                        "description": "Get lock activity logs"
                    }
                },
                {
                    "name": "Unregister Lock",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/locks/{{lock_device_id}}/unregister",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "locks",
                                "{{lock_device_id}}",
                                "unregister"
                            ]
                        },
                        "description": "Unregister lock device"
                    }
                }
            ],
            "description": "Lock device management and control endpoints"
        },
        {
            "name": "05 - Videos",
            "item": [
                {
                    "name": "Upload Video",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Store video ID",
                                    "if (pm.response.code === 200) {",
                                    "    var jsonData = pm.response.json();",
                                    "    if (jsonData.video && jsonData.video.id) {",
                                    "        pm.environment.set(\"video_id\", jsonData.video.id);",
                                    "    }",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "multipart/form-data",
                                "disabled": true
                            }
                        ],
                        "body": {
                            "mode": "formdata",
                            "formdata": [
                                {
                                    "key": "video",
                                    "type": "file",
                                    "src": []
                                },
                                {
                                    "key": "facility_id",
                                    "value": "{{created_facility_id}}",
                                    "type": "text"
                                },
                                {
                                    "key": "device_id",
                                    "value": "{{camera_device_id}}",
                                    "type": "text"
                                },
                                {
                                    "key": "description",
                                    "value": "Test video upload",
                                    "type": "text"
                                }
                            ]
                        },
                        "url": {
                            "raw": "{{api_base_url}}/videos",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "videos"
                            ]
                        },
                        "description": "Upload a video file"
                    }
                },
                {
                    "name": "Get All Videos",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/videos?page=1&page_size=10&facility_id={{created_facility_id}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "videos"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "page_size",
                                    "value": "10"
                                },
                                {
                                    "key": "facility_id",
                                    "value": "{{created_facility_id}}"
                                },
                                {
                                    "key": "device_id",
                                    "value": "{{camera_device_id}}",
                                    "disabled": true
                                }
                            ]
                        },
                        "description": "Get all videos with optional filtering"
                    }
                },
                {
                    "name": "Associate Video",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"device_id\": \"{{camera_device_id}}\",\n    \"association_type\": \"camera_recording\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/videos/{{video_id}}/associate",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "videos",
                                "{{video_id}}",
                                "associate"
                            ]
                        },
                        "description": "Associate video with a device"
                    }
                },
                {
                    "name": "Disassociate Video",
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/videos/{{video_id}}/disassociate",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "videos",
                                "{{video_id}}",
                                "disassociate"
                            ]
                        },
                        "description": "Remove video association with devices"
                    }
                },
                {
                    "name": "Delete Video",
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/videos/{{video_id}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "videos",
                                "{{video_id}}"
                            ]
                        },
                        "description": "Delete a video"
                    }
                }
            ],
            "description": "Video management endpoints"
        },
        {
            "name": "06 - Bridges",
            "item": [
                {
                    "name": "Register Bridge",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Store bridge device ID",
                                    "if (pm.response.code === 200) {",
                                    "    var jsonData = pm.response.json();",
                                    "    if (jsonData.bridge && jsonData.bridge.device_id) {",
                                    "        pm.environment.set(\"bridge_device_id\", jsonData.bridge.device_id);",
                                    "    }",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"device_id\": \"{{test_bridge_device_id}}\",\n    \"facility_id\": {{created_facility_id}},\n    \"name\": \"Main Bridge Device\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/bridges",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "bridges"
                            ]
                        },
                        "description": "Register a new bridge device"
                    }
                },
                {
                    "name": "Get All Bridges",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/bridges?facility_id={{created_facility_id}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "bridges"
                            ],
                            "query": [
                                {
                                    "key": "facility_id",
                                    "value": "{{created_facility_id}}"
                                },
                                {
                                    "key": "status",
                                    "value": "active",
                                    "disabled": true
                                }
                            ]
                        },
                        "description": "Get all bridge devices for a facility"
                    }
                },
                {
                    "name": "Update Bridge",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"device_name\": \"Updated Main Bridge Device\",\n    \"location\": \"Updated Server Room\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/bridges/{{bridge_device_id}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "bridges",
                                "{{bridge_device_id}}"
                            ]
                        },
                        "description": "Update bridge device information"
                    }
                },
                {
                    "name": "Register Edge Connection",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"edge_device_id\": \"{{lock_device_id}}\",\n    \"device_type\": \"lock\",\n    \"connection_status\": \"connected\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/bridges/{{bridge_device_id}}/connections",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "bridges",
                                "{{bridge_device_id}}",
                                "connections"
                            ]
                        },
                        "description": "Register edge device connection to bridge"
                    }
                },
                {
                    "name": "Get Edge Connections",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/bridges/{{bridge_device_id}}/connections",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "bridges",
                                "{{bridge_device_id}}",
                                "connections"
                            ]
                        },
                        "description": "Get all edge device connections for a bridge"
                    }
                },
                {
                    "name": "Update Edge Connection",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"connection_status\": \"disconnected\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/bridges/{{bridge_device_id}}/connections/{{lock_device_id}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "bridges",
                                "{{bridge_device_id}}",
                                "connections",
                                "{{lock_device_id}}"
                            ]
                        },
                        "description": "Update edge device connection status"
                    }
                },
                {
                    "name": "Delete Edge Connection",
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/bridges/{{bridge_device_id}}/connections/{{lock_device_id}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "bridges",
                                "{{bridge_device_id}}",
                                "connections",
                                "{{lock_device_id}}"
                            ]
                        },
                        "description": "Delete edge device connection from bridge"
                    }
                },
                {
                    "name": "Get Bridge Activities",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/bridges/{{bridge_device_id}}/activities?page=1&page_size=10",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "bridges",
                                "{{bridge_device_id}}",
                                "activities"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "page_size",
                                    "value": "10"
                                }
                            ]
                        },
                        "description": "Get bridge activity logs"
                    }
                },
                {
                    "name": "Unregister Bridge",
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/bridges/{{bridge_device_id}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "bridges",
                                "{{bridge_device_id}}"
                            ]
                        },
                        "description": "Unregister bridge device"
                    }
                }
            ],
            "description": "Bridge device management endpoints"
        },
        {
            "name": "07 - Cameras",
            "item": [
                {
                    "name": "Register Camera",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Store camera device ID",
                                    "if (pm.response.code === 200) {",
                                    "    var jsonData = pm.response.json();",
                                    "    if (jsonData.camera && jsonData.camera.device_id) {",
                                    "        pm.environment.set(\"camera_device_id\", jsonData.camera.device_id);",
                                    "    }",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"device_id\": \"{{test_camera_device_id}}\",\n    \"facility_id\": {{created_facility_id}},\n    \"name\": \"Main Entrance Camera\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/cameras/register",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "cameras",
                                "register"
                            ]
                        },
                        "description": "Register a new camera device"
                    }
                },
                {
                    "name": "Get All Cameras",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/cameras?facility_id={{created_facility_id}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "cameras"
                            ],
                            "query": [
                                {
                                    "key": "facility_id",
                                    "value": "{{created_facility_id}}"
                                },
                                {
                                    "key": "status",
                                    "value": "active",
                                    "disabled": true
                                },
                                {
                                    "key": "location",
                                    "value": "main_entrance",
                                    "disabled": true
                                }
                            ]
                        },
                        "description": "Get all cameras for a facility"
                    }
                },
                {
                    "name": "Update Camera",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"device_name\": \"Updated Main Entrance Camera\",\n    \"location\": \"Updated Main Entrance\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/cameras/{{camera_device_id}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "cameras",
                                "{{camera_device_id}}"
                            ]
                        },
                        "description": "Update camera device information"
                    }
                },
                {
                    "name": "Camera Control",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"facility_id\": {{created_facility_id}},\n    \"device_id\": \"{{camera_device_id}}\",\n    \"user_id\": {{user_id}},\n    \"action\": \"START_RECORD\",\n    \"reason\": \"User initiated recording\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/cameras/{{camera_device_id}}/control",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "cameras",
                                "{{camera_device_id}}",
                                "control"
                            ]
                        },
                        "description": "Control camera operations. Available actions: CAMERA_ACTION_UNSPECIFIED, START_LIVE_STREAM, STOP_LIVE_STREAM, START_RECORD, STOP_RECORD, STATUS_CHECK"
                    }
                },
                {
                    "name": "Get Camera Activities",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/cameras/activities?page=1&page_size=10&facility_id={{created_facility_id}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "cameras",
                                "activities"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "page_size",
                                    "value": "10"
                                },
                                {
                                    "key": "facility_id",
                                    "value": "{{created_facility_id}}"
                                },
                                {
                                    "key": "device_id",
                                    "value": "{{camera_device_id}}",
                                    "disabled": true
                                }
                            ]
                        },
                        "description": "Get camera activity logs"
                    }
                },
                {
                    "name": "Unregister Camera",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/cameras/{{camera_device_id}}/unregister",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "cameras",
                                "{{camera_device_id}}",
                                "unregister"
                            ]
                        },
                        "description": "Unregister camera device"
                    }
                }
            ],
            "description": "Camera device management endpoints"
        },
        {
            "name": "08 - Storage",
            "item": [
                {
                    "name": "Serve File",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/storage/{{bucket_name}}/{{file_path}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "storage",
                                "{{bucket_name}}",
                                "{{file_path}}"
                            ]
                        },
                        "description": "Serve a file from storage"
                    }
                },
                {
                    "name": "Head File",
                    "request": {
                        "method": "HEAD",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/storage/{{bucket_name}}/{{file_path}}",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "storage",
                                "{{bucket_name}}",
                                "{{file_path}}"
                            ]
                        },
                        "description": "Get file metadata from storage"
                    }
                }
            ],
            "description": "Storage service endpoints"
        },
        {
            "name": "09 - gRPC Gateway",
            "item": [
                {
                    "name": "gRPC Gateway - GET",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{api_base_url}}/grpc/auth.AuthService/ValidateSession",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "grpc",
                                "auth.AuthService",
                                "ValidateSession"
                            ]
                        },
                        "description": "Access gRPC services via HTTP gateway"
                    }
                },
                {
                    "name": "gRPC Gateway - POST",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"session_token\": \"{{session_token}}\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base_url}}/grpc/auth.AuthService/ValidateSession",
                            "host": [
                                "{{api_base_url}}"
                            ],
                            "path": [
                                "grpc",
                                "auth.AuthService",
                                "ValidateSession"
                            ]
                        },
                        "description": "Access gRPC services via HTTP gateway with POST"
                    }
                }
            ],
            "description": "gRPC Gateway endpoints - access all gRPC services via HTTP"
        }
    ]
}