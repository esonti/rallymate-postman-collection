{
    "info": {
        "_postman_id": "facilities-rest-collection-001",
        "name": "RallyMate Facilities REST API",
        "description": "Facility management endpoints for RallyMate API - CRUD operations for facilities",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "rallymate-facilities"
    },
    "item": [
        {
            "name": "Facility Management",
            "item": [
                {
                    "name": "Get Facilities",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has facilities array\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('facilities');",
                                    "    pm.expect(jsonData.facilities).to.be.an('array');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has pagination info\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('page');",
                                    "    pm.expect(jsonData).to.have.property('page_size');",
                                    "    pm.expect(jsonData).to.have.property('total');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/facilities?page=1&page_size=10",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "facilities"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "page_size",
                                    "value": "10"
                                }
                            ]
                        },
                        "description": "Get list of facilities with pagination"
                    }
                },
                {
                    "name": "Create Facility",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has facility data\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('facility');",
                                    "    pm.expect(jsonData.facility).to.have.property('id');",
                                    "    pm.expect(jsonData.facility).to.have.property('name');",
                                    "    pm.expect(jsonData.facility).to.have.property('address');",
                                    "    ",
                                    "    // Store facility ID for subsequent requests",
                                    "    pm.environment.set(\"created_facility_id\", jsonData.facility.id);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"Test Tennis Club\",\n  \"address\": \"123 Tennis Court Drive, Sportsville, TX 75001\",\n  \"description\": \"A premier tennis club with state-of-the-art facilities\",\n  \"timezone\": \"America/Chicago\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/facilities",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "facilities"
                            ]
                        },
                        "description": "Create a new facility"
                    }
                },
                {
                    "name": "Get Facility by ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has facility data\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('facility');",
                                    "    pm.expect(jsonData.facility).to.have.property('id');",
                                    "    pm.expect(jsonData.facility.id).to.equal(parseInt(pm.environment.get('created_facility_id')));",
                                    "    pm.expect(jsonData.facility).to.have.property('name');",
                                    "    pm.expect(jsonData.facility).to.have.property('address');",
                                    "    pm.expect(jsonData.facility).to.have.property('timezone');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/facilities/{{created_facility_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "facilities",
                                "{{created_facility_id}}"
                            ]
                        },
                        "description": "Get facility details by ID"
                    }
                },
                {
                    "name": "Update Facility",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has updated facility data\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('facility');",
                                    "    pm.expect(jsonData.facility).to.have.property('name');",
                                    "    pm.expect(jsonData.facility.name).to.include('Updated');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"Updated Test Tennis Club\",\n  \"address\": \"123 Tennis Court Drive, Sportsville, TX 75001\",\n  \"description\": \"An updated premier tennis club with modern amenities\",\n  \"timezone\": \"America/Chicago\",\n  \"is_active\": true\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/facilities/{{created_facility_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "facilities",
                                "{{created_facility_id}}"
                            ]
                        },
                        "description": "Update facility information"
                    }
                },
                {
                    "name": "Delete Facility",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200 or 204\", function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    pm.test(\"Response indicates success\", function () {",
                                    "        var jsonData = pm.response.json();",
                                    "        pm.expect(jsonData).to.have.property('success');",
                                    "        pm.expect(jsonData.success).to.be.true;",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/facilities/{{created_facility_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "facilities",
                                "{{created_facility_id}}"
                            ]
                        },
                        "description": "Delete facility"
                    }
                }
            ],
            "description": "Basic facility CRUD operations"
        },
        {
            "name": "Search and Filtering",
            "item": [
                {
                    "name": "Search Facilities by Name",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has filtered facilities\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('facilities');",
                                    "    pm.expect(jsonData.facilities).to.be.an('array');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/facilities?search=Tennis&page=1&page_size=10",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "facilities"
                            ],
                            "query": [
                                {
                                    "key": "search",
                                    "value": "Tennis"
                                },
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "page_size",
                                    "value": "10"
                                }
                            ]
                        },
                        "description": "Search facilities by name or address"
                    }
                },
                {
                    "name": "Get Active Facilities Only",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has active facilities only\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('facilities');",
                                    "    pm.expect(jsonData.facilities).to.be.an('array');",
                                    "    ",
                                    "    // Check that all returned facilities are active",
                                    "    jsonData.facilities.forEach(function(facility) {",
                                    "        pm.expect(facility.is_active).to.be.true;",
                                    "    });",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/facilities?active_only=true",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "facilities"
                            ],
                            "query": [
                                {
                                    "key": "active_only",
                                    "value": "true"
                                }
                            ]
                        },
                        "description": "Get only active facilities"
                    }
                }
            ],
            "description": "Search and filtering operations"
        },
        {
            "name": "Error Cases",
            "item": [
                {
                    "name": "Create Facility - Missing Name",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has error information\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('error');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"address\": \"123 Tennis Court Drive\",\n  \"description\": \"Missing name field\",\n  \"timezone\": \"America/Chicago\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/facilities",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "facilities"
                            ]
                        },
                        "description": "Test error handling with missing required name field"
                    }
                },
                {
                    "name": "Get Facility - Not Found",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 404\", function () {",
                                    "    pm.response.to.have.status(404);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has error information\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('error');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/facilities/99999",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "facilities",
                                "99999"
                            ]
                        },
                        "description": "Test error handling with non-existent facility ID"
                    }
                },
                {
                    "name": "Update Facility - Invalid ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400 or 404\", function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has error information\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('error');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"Updated Facility\",\n  \"address\": \"123 Updated Address\",\n  \"timezone\": \"America/New_York\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/facilities/invalid-id",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "facilities",
                                "invalid-id"
                            ]
                        },
                        "description": "Test error handling with invalid facility ID"
                    }
                },
                {
                    "name": "Unauthorized Access",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 401\", function () {",
                                    "    pm.response.to.have.status(401);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has error information\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('error');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/facilities",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "facilities"
                            ]
                        },
                        "description": "Test unauthorized access without token"
                    }
                }
            ],
            "description": "Error handling test cases"
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Pre-request script for common setup",
                    "console.log('Testing RallyMate Facilities API endpoint: ' + pm.request.url);"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global test script",
                    "pm.test(\"Response time is less than 5000ms\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                    "});",
                    "",
                    "pm.test(\"Response has Content-Type header\", function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                    "});"
                ]
            }
        }
    ],
    "variable": [
        {
            "key": "collection_version",
            "value": "1.0.0",
            "type": "string"
        }
    ]
}