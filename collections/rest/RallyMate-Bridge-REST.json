{
    "info": {
        "_postman_id": "bridge-rest-collection-001",
        "name": "RallyMate Bridge REST API",
        "description": "Bridge management endpoints for RallyMate API - IoT device bridge connectivity and management",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "rallymate-bridge"
    },
    "item": [
        {
            "name": "Bridge Management",
            "item": [
                {
                    "name": "Get Bridges",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has bridges array\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('bridges');",
                                    "    pm.expect(jsonData.bridges).to.be.an('array');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has pagination info\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('page');",
                                    "    pm.expect(jsonData).to.have.property('page_size');",
                                    "    pm.expect(jsonData).to.have.property('total');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/bridges?page=1&page_size=10",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "bridges"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "page_size",
                                    "value": "10"
                                }
                            ]
                        },
                        "description": "Get list of bridges with pagination"
                    }
                },
                {
                    "name": "Create Bridge",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has bridge data\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('bridge');",
                                    "    pm.expect(jsonData.bridge).to.have.property('id');",
                                    "    pm.expect(jsonData.bridge).to.have.property('name');",
                                    "    pm.expect(jsonData.bridge).to.have.property('facility_id');",
                                    "    pm.expect(jsonData.bridge).to.have.property('status');",
                                    "    ",
                                    "    // Store bridge ID for subsequent requests",
                                    "    pm.environment.set(\"created_bridge_id\", jsonData.bridge.id);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"Main IoT Bridge\",\n  \"facility_id\": {{facility_id}},\n  \"device_id\": \"BRIDGE-001-MAIN\",\n  \"ip_address\": \"192.168.1.100\",\n  \"port\": 8080,\n  \"protocol\": \"HTTP\",\n  \"firmware_version\": \"1.2.3\",\n  \"description\": \"Main IoT device bridge for facility\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/bridges",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "bridges"
                            ]
                        },
                        "description": "Create a new bridge"
                    }
                },
                {
                    "name": "Get Bridge by ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has bridge data\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('bridge');",
                                    "    pm.expect(jsonData.bridge).to.have.property('id');",
                                    "    pm.expect(jsonData.bridge.id).to.equal(parseInt(pm.environment.get('created_bridge_id')));",
                                    "    pm.expect(jsonData.bridge).to.have.property('name');",
                                    "    pm.expect(jsonData.bridge).to.have.property('status');",
                                    "    pm.expect(jsonData.bridge).to.have.property('device_id');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/bridges/{{created_bridge_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "bridges",
                                "{{created_bridge_id}}"
                            ]
                        },
                        "description": "Get bridge details by ID"
                    }
                },
                {
                    "name": "Update Bridge",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has updated bridge data\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('bridge');",
                                    "    pm.expect(jsonData.bridge).to.have.property('name');",
                                    "    pm.expect(jsonData.bridge.name).to.include('Updated');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"Updated Main IoT Bridge\",\n  \"ip_address\": \"192.168.1.101\",\n  \"port\": 8081,\n  \"protocol\": \"HTTPS\",\n  \"firmware_version\": \"1.3.0\",\n  \"description\": \"Updated main IoT device bridge for facility\",\n  \"is_active\": true\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/bridges/{{created_bridge_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "bridges",
                                "{{created_bridge_id}}"
                            ]
                        },
                        "description": "Update bridge information"
                    }
                },
                {
                    "name": "Delete Bridge",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200 or 204\", function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    pm.test(\"Response indicates success\", function () {",
                                    "        var jsonData = pm.response.json();",
                                    "        pm.expect(jsonData).to.have.property('success');",
                                    "        pm.expect(jsonData.success).to.be.true;",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/bridges/{{created_bridge_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "bridges",
                                "{{created_bridge_id}}"
                            ]
                        },
                        "description": "Delete bridge"
                    }
                }
            ],
            "description": "Basic bridge CRUD operations"
        },
        {
            "name": "Bridge Control",
            "item": [
                {
                    "name": "Connect Bridge",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Bridge connected successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('status');",
                                    "    pm.expect(jsonData.status).to.equal('connected');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has connection timestamp\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('connected_at');",
                                    "    pm.expect(jsonData).to.have.property('connection_id');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"user_id\": {{user_id}},\n  \"timeout\": 30\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/bridges/{{created_bridge_id}}/connect",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "bridges",
                                "{{created_bridge_id}}",
                                "connect"
                            ]
                        },
                        "description": "Connect to bridge"
                    }
                },
                {
                    "name": "Disconnect Bridge",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Bridge disconnected successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('status');",
                                    "    pm.expect(jsonData.status).to.equal('disconnected');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has disconnection timestamp\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('disconnected_at');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"user_id\": {{user_id}}\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/bridges/{{created_bridge_id}}/disconnect",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "bridges",
                                "{{created_bridge_id}}",
                                "disconnect"
                            ]
                        },
                        "description": "Disconnect from bridge"
                    }
                },
                {
                    "name": "Restart Bridge",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Bridge restart initiated\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('status');",
                                    "    pm.expect(jsonData.status).to.equal('restarting');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has restart timestamp\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('restart_initiated_at');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"user_id\": {{user_id}},\n  \"reason\": \"Manual restart for testing\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/bridges/{{created_bridge_id}}/restart",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "bridges",
                                "{{created_bridge_id}}",
                                "restart"
                            ]
                        },
                        "description": "Restart bridge"
                    }
                },
                {
                    "name": "Get Bridge Status",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has current status\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('status');",
                                    "    pm.expect(jsonData).to.have.property('last_update');",
                                    "    pm.expect(jsonData).to.have.property('uptime');",
                                    "});",
                                    "",
                                    "pm.test(\"Status is valid\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.status).to.be.oneOf(['connected', 'disconnected', 'error', 'restarting', 'offline']);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/bridges/{{created_bridge_id}}/status",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "bridges",
                                "{{created_bridge_id}}",
                                "status"
                            ]
                        },
                        "description": "Get current bridge status and health information"
                    }
                }
            ],
            "description": "Bridge control and connection operations"
        },
        {
            "name": "Device Management",
            "item": [
                {
                    "name": "Get Connected Devices",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has devices array\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('devices');",
                                    "    pm.expect(jsonData.devices).to.be.an('array');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has device count\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('total_devices');",
                                    "    pm.expect(jsonData).to.have.property('connected_devices');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/bridges/{{created_bridge_id}}/devices",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "bridges",
                                "{{created_bridge_id}}",
                                "devices"
                            ]
                        },
                        "description": "Get devices connected to bridge"
                    }
                },
                {
                    "name": "Send Command to Device",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Command sent successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('command_id');",
                                    "    pm.expect(jsonData).to.have.property('status');",
                                    "    pm.expect(jsonData.status).to.equal('sent');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has execution info\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('sent_at');",
                                    "    pm.expect(jsonData).to.have.property('device_id');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"device_id\": \"LOCK-001-MGT\",\n  \"command\": \"unlock\",\n  \"parameters\": {\n    \"duration\": 30,\n    \"force\": false\n  },\n  \"user_id\": {{user_id}}\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/bridges/{{created_bridge_id}}/send-command",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "bridges",
                                "{{created_bridge_id}}",
                                "send-command"
                            ]
                        },
                        "description": "Send command to device through bridge"
                    }
                },
                {
                    "name": "Get Device Status",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has device status\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('device_id');",
                                    "    pm.expect(jsonData).to.have.property('status');",
                                    "    pm.expect(jsonData).to.have.property('last_seen');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has connectivity info\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('signal_strength');",
                                    "    pm.expect(jsonData).to.have.property('battery_level');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/bridges/{{created_bridge_id}}/devices/LOCK-001-MGT/status",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "bridges",
                                "{{created_bridge_id}}",
                                "devices",
                                "LOCK-001-MGT",
                                "status"
                            ]
                        },
                        "description": "Get status of specific device through bridge"
                    }
                }
            ],
            "description": "Device management through bridge"
        },
        {
            "name": "Bridge Configuration",
            "item": [
                {
                    "name": "Get Bridge Config",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has configuration\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('configuration');",
                                    "    pm.expect(jsonData.configuration).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/bridges/{{created_bridge_id}}/config",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "bridges",
                                "{{created_bridge_id}}",
                                "config"
                            ]
                        },
                        "description": "Get bridge configuration"
                    }
                },
                {
                    "name": "Update Bridge Config",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Configuration updated successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('configuration');",
                                    "    pm.expect(jsonData).to.have.property('updated_at');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"polling_interval\": 30,\n  \"max_devices\": 50,\n  \"auto_discovery\": true,\n  \"security_level\": \"high\",\n  \"logging_enabled\": true,\n  \"heartbeat_interval\": 60\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/bridges/{{created_bridge_id}}/config",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "bridges",
                                "{{created_bridge_id}}",
                                "config"
                            ]
                        },
                        "description": "Update bridge configuration"
                    }
                },
                {
                    "name": "Reset Bridge Config",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Configuration reset successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('status');",
                                    "    pm.expect(jsonData.status).to.equal('reset');",
                                    "    pm.expect(jsonData).to.have.property('reset_at');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"user_id\": {{user_id}},\n  \"confirm\": true\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/bridges/{{created_bridge_id}}/reset-config",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "bridges",
                                "{{created_bridge_id}}",
                                "reset-config"
                            ]
                        },
                        "description": "Reset bridge configuration to defaults"
                    }
                }
            ],
            "description": "Bridge configuration management"
        },
        {
            "name": "Facility Bridges",
            "item": [
                {
                    "name": "Get Bridges by Facility",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has bridges for facility\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('bridges');",
                                    "    pm.expect(jsonData.bridges).to.be.an('array');",
                                    "});",
                                    "",
                                    "pm.test(\"All bridges belong to specified facility\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    var facilityId = parseInt(pm.environment.get('facility_id'));",
                                    "    ",
                                    "    jsonData.bridges.forEach(function(bridge) {",
                                    "        pm.expect(bridge.facility_id).to.equal(facilityId);",
                                    "    });",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/facilities/{{facility_id}}/bridges",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "facilities",
                                "{{facility_id}}",
                                "bridges"
                            ]
                        },
                        "description": "Get all bridges for a specific facility"
                    }
                },
                {
                    "name": "Get Connected Bridges Only",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has connected bridges only\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('bridges');",
                                    "    pm.expect(jsonData.bridges).to.be.an('array');",
                                    "    ",
                                    "    // Check that all returned bridges are connected",
                                    "    jsonData.bridges.forEach(function(bridge) {",
                                    "        pm.expect(bridge.status).to.equal('connected');",
                                    "    });",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/bridges?status=connected",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "bridges"
                            ],
                            "query": [
                                {
                                    "key": "status",
                                    "value": "connected"
                                }
                            ]
                        },
                        "description": "Get only connected bridges"
                    }
                }
            ],
            "description": "Facility-level bridge operations"
        },
        {
            "name": "Error Cases",
            "item": [
                {
                    "name": "Create Bridge - Missing Required Fields",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has error information\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('error');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"ip_address\": \"192.168.1.100\",\n  \"port\": 8080,\n  \"description\": \"Missing name and facility_id\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/bridges",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "bridges"
                            ]
                        },
                        "description": "Test error handling with missing required fields"
                    }
                },
                {
                    "name": "Connect Bridge - Connection Failed",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 409 or 503\", function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([409, 503]);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has error information\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('error');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"user_id\": {{user_id}},\n  \"timeout\": 30\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/bridges/99999/connect",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "bridges",
                                "99999",
                                "connect"
                            ]
                        },
                        "description": "Test error handling with non-existent bridge"
                    }
                },
                {
                    "name": "Unauthorized Bridge Access",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 401\", function () {",
                                    "    pm.response.to.have.status(401);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has error information\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('error');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/bridges",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "bridges"
                            ]
                        },
                        "description": "Test unauthorized access without token"
                    }
                }
            ],
            "description": "Error handling test cases"
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Pre-request script for common setup",
                    "console.log('Testing RallyMate Bridge API endpoint: ' + pm.request.url);"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global test script",
                    "pm.test(\"Response time is less than 5000ms\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                    "});",
                    "",
                    "pm.test(\"Response has Content-Type header\", function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                    "});"
                ]
            }
        }
    ],
    "variable": [
        {
            "key": "collection_version",
            "value": "1.0.0",
            "type": "string"
        }
    ]
}