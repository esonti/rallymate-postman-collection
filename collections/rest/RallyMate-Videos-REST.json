{
    "info": {
        "_postman_id": "videos-rest-collection-corrected",
        "name": "RallyMate Videos REST API (Corrected)",
        "description": "Video Management API - Correct URLs and request bodies matching actual HTTP handlers",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "rallymate-videos-corrected"
    },
    "item": [
        {
            "name": "Video Management",
            "item": [
                {
                    "name": "Upload Video",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has video object\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('video');",
                                    "    pm.expect(jsonData.video).to.have.property('id');",
                                    "    pm.expect(jsonData.video).to.have.property('facility_id');",
                                    "    pm.expect(jsonData.video).to.have.property('file_url');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has upload_url\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('upload_url');",
                                    "    pm.expect(jsonData.upload_url).to.be.a('string');",
                                    "    pm.expect(jsonData.upload_url).to.include('storage.googleapis.com');",
                                    "});",
                                    "",
                                    "// Store video ID for subsequent requests",
                                    "if (pm.response.code === 201) {",
                                    "    var response = pm.response.json();",
                                    "    pm.environment.set('video_id', response.video.id);",
                                    "    pm.environment.set('uploaded_video_url', response.upload_url);",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "formdata",
                            "formdata": [
                                {
                                    "key": "video",
                                    "type": "file",
                                    "src": [],
                                    "description": "Select a video file to upload (MP4, AVI, MOV, etc.)"
                                },
                                {
                                    "key": "facility_id",
                                    "value": "{{test_facility_id}}",
                                    "type": "text",
                                    "description": "The facility ID where the video was recorded"
                                },
                                {
                                    "key": "camera_device_id",
                                    "value": "{{camera_device_id}}",
                                    "type": "text",
                                    "description": "The camera device ID that recorded the video"
                                },
                                {
                                    "key": "recording_type",
                                    "value": "manual",
                                    "type": "text",
                                    "description": "Type of recording (manual, scheduled, motion_detected, etc.)"
                                },
                                {
                                    "key": "start_time",
                                    "value": "{{$isoTimestamp}}",
                                    "type": "text",
                                    "description": "When the recording started (RFC3339 format)"
                                }
                            ]
                        },
                        "url": {
                            "raw": "{{base_url}}/api/videos",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "videos"
                            ]
                        }
                    }
                },
                {
                    "name": "Get Videos",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has videos array\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('videos');",
                                    "    pm.expect(jsonData.videos).to.be.an('array');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/videos?facility_id={{test_facility_id}}&camera_device_id={{camera_device_id}}&recording_type=manual&page=1&page_size=50",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "videos"
                            ],
                            "query": [
                                {
                                    "key": "facility_id",
                                    "value": "{{test_facility_id}}"
                                },
                                {
                                    "key": "camera_device_id",
                                    "value": "{{camera_device_id}}"
                                },
                                {
                                    "key": "recording_type",
                                    "value": "manual"
                                },
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "page_size",
                                    "value": "50"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "Delete Video",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response indicates success\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/videos/{{video_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "videos",
                                "{{video_id}}"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "Video User Associations",
            "item": [
                {
                    "name": "Associate Video to User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response indicates success\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"user_id\": {{test_user_id}}\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/videos/{{video_id}}/associate",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "videos",
                                "{{video_id}}",
                                "associate"
                            ]
                        }
                    }
                },
                {
                    "name": "Disassociate Video from User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response indicates success\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"user_id\": {{test_user_id}}\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/videos/{{video_id}}/disassociate",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "videos",
                                "{{video_id}}",
                                "disassociate"
                            ]
                        }
                    }
                }
            ]
        }
    ],
    "auth": {
        "type": "bearer",
        "bearer": [
            {
                "key": "token",
                "value": "{{session_token}}",
                "type": "string"
            }
        ]
    },
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "if (!pm.environment.get('test_facility_id')) {",
                    "    pm.environment.set('test_facility_id', '1');",
                    "}",
                    "",
                    "if (!pm.environment.get('camera_device_id')) {",
                    "    pm.environment.set('camera_device_id', 'camera-test-001');",
                    "}",
                    "",
                    "if (!pm.environment.get('test_user_id')) {",
                    "    pm.environment.set('test_user_id', '1');",
                    "}",
                    "",
                    "if (!pm.environment.get('video_id')) {",
                    "    pm.environment.set('video_id', '1');",
                    "}"
                ]
            }
        }
    ]
}