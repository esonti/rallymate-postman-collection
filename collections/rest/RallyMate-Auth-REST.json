{
    "info": {
        "_postman_id": "auth-rest-collection-001",
        "name": "RallyMate Auth REST API",
        "description": "Authentication endpoints for RallyMate API - Enhanced OTP-based authentication with smart auto-login feature (30-day rule) and session management",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "rallymate-auth"
    },
    "item": [
        {
            "name": "Authentication Flow",
            "item": [
                {
                    "name": "Send OTP",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has success field\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has expires_at timestamp\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('expires_at');",
                                    "    pm.expect(jsonData.expires_at).to.be.a('number');",
                                    "});",
                                    "",
                                    "pm.test(\"Check message type (OTP vs Auto-login)\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "    ",
                                    "    if (jsonData.message === 'AUTO_LOGIN_AVAILABLE') {",
                                    "        console.log('üöÄ Auto-login available! User can skip OTP verification.');",
                                    "        pm.environment.set('auto_login_available', 'true');",
                                    "    } else if (jsonData.message === 'OTP sent successfully') {",
                                    "        console.log('üì± Standard OTP sent - new user or 30+ days inactive.');",
                                    "        pm.environment.set('auto_login_available', 'false');",
                                    "    } else {",
                                    "        console.log('‚ÑπÔ∏è Unexpected message: ' + jsonData.message);",
                                    "        pm.environment.set('auto_login_available', 'false');",
                                    "    }",
                                    "});",
                                    "",
                                    "// Store phone number for subsequent requests",
                                    "if (pm.response.code === 200) {",
                                    "    var requestBody = JSON.parse(pm.request.body.raw);",
                                    "    pm.environment.set(\"test_phone_number\", requestBody.phone_number);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"phone_number\": \"+1234567890\",\n  \"device_info\": \"Postman Test Client\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/auth/otp/send",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "otp",
                                "send"
                            ]
                        },
                        "description": "Send OTP to phone number for authentication. If user was active within 30 days, returns 'AUTO_LOGIN_AVAILABLE' message instead of sending SMS OTP."
                    }
                },
                {
                    "name": "Verify OTP",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has success field\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has session data when successful\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    if (jsonData.success) {",
                                    "        pm.expect(jsonData).to.have.property('session');",
                                    "        pm.expect(jsonData).to.have.property('token');",
                                    "        pm.expect(jsonData).to.have.property('user');",
                                    "        pm.expect(jsonData.session).to.have.property('session_token');",
                                    "        pm.expect(jsonData.session).to.have.property('refresh_token');",
                                    "        ",
                                    "        // Store tokens for authenticated requests",
                                    "        pm.environment.set(\"session_token\", jsonData.session.session_token);",
                                    "        pm.environment.set(\"refresh_token\", jsonData.session.refresh_token);",
                                    "        pm.environment.set(\"user_id\", jsonData.session.user_id);",
                                    "        ",
                                    "        // Check if this was auto-login or standard OTP",
                                    "        if (jsonData.message && jsonData.message.includes('Auto-login')) {",
                                    "            console.log('üöÄ Auto-login completed successfully!');",
                                    "        } else {",
                                    "            console.log('üì± Standard OTP verification completed.');",
                                    "        }",
                                    "    }",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"phone_number\": \"{{test_phone_number}}\",\n  \"otp_code\": \"123456\",\n  \"device_info\": \"Postman Test Client\",\n  \"ip_address\": \"127.0.0.1\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/auth/otp/verify",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "otp",
                                "verify"
                            ]
                        },
                        "description": "Verify OTP code and get session tokens. Use 'AUTO_LOGIN' as otp_code for auto-login if user was active within 30 days."
                    }
                }
            ],
            "description": "Standard OTP authentication flow - enhanced with auto-login detection for improved user experience"
        },
        {
            "name": "Auto-Login Flow (30-Day Rule)",
            "item": [
                {
                    "name": "Check Auto-Login Eligibility",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has success field\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has expires_at timestamp\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('expires_at');",
                                    "    pm.expect(jsonData.expires_at).to.be.a('number');",
                                    "});",
                                    "",
                                    "pm.test(\"Check for auto-login availability\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    if (jsonData.message === 'AUTO_LOGIN_AVAILABLE') {",
                                    "        pm.environment.set('auto_login_available', 'true');",
                                    "        console.log('Auto-login available - user can skip OTP');",
                                    "    } else {",
                                    "        pm.environment.set('auto_login_available', 'false');",
                                    "        console.log('Standard OTP required - new user or 30+ days inactive');",
                                    "    }",
                                    "});",
                                    "",
                                    "// Store phone number for subsequent requests",
                                    "if (pm.response.code === 200) {",
                                    "    var requestBody = JSON.parse(pm.request.body.raw);",
                                    "    pm.environment.set(\"test_phone_number\", requestBody.phone_number);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"phone_number\": \"+15551234567\",\n  \"device_info\": \"Postman Test Client\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/auth/otp/send",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "otp",
                                "send"
                            ]
                        },
                        "description": "Check for auto-login eligibility. Response with 'AUTO_LOGIN_AVAILABLE' message means user can skip OTP verification."
                    }
                },
                {
                    "name": "Complete Auto-Login",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// This request should only be run if auto-login is available",
                                    "if (pm.environment.get('auto_login_available') !== 'true') {",
                                    "    console.log('Auto-login not available - use standard OTP flow instead');",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Auto-login successful\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success');",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.message).to.include('Auto-login successful');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has session tokens\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('session');",
                                    "    pm.expect(jsonData).to.have.property('token');",
                                    "    pm.expect(jsonData.session).to.have.property('session_token');",
                                    "    pm.expect(jsonData.session).to.have.property('refresh_token');",
                                    "    ",
                                    "    // Store tokens for subsequent requests",
                                    "    pm.environment.set(\"session_token\", jsonData.session.session_token);",
                                    "    pm.environment.set(\"refresh_token\", jsonData.session.refresh_token);",
                                    "    pm.environment.set(\"user_id\", jsonData.session.user_id);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has user information\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('user');",
                                    "    pm.expect(jsonData.user).to.have.property('id');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"phone_number\": \"{{test_phone_number}}\",\n  \"otp_code\": \"AUTO_LOGIN\",\n  \"device_info\": \"Postman Test Client\",\n  \"ip_address\": \"127.0.0.1\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/auth/otp/verify",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "otp",
                                "verify"
                            ]
                        },
                        "description": "Complete auto-login using special 'AUTO_LOGIN' code. Only works if user was active within 30 days."
                    }
                }
            ],
            "description": "Smart auto-login flow for users active within 30 days - skip OTP verification"
        },
        {
            "name": "Session Management",
            "item": [
                {
                    "name": "Validate Session",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has valid field\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('valid');",
                                    "    pm.expect(jsonData.valid).to.be.a('boolean');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has user_id when valid\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    if (jsonData.valid) {",
                                    "        pm.expect(jsonData).to.have.property('user_id');",
                                    "        pm.expect(jsonData).to.have.property('expires_at');",
                                    "    }",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"session_token\": \"{{session_token}}\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/auth/session/validate",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "session",
                                "validate"
                            ]
                        },
                        "description": "Validate current session token"
                    }
                },
                {
                    "name": "Refresh Session",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has success field\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has new session when successful\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    if (jsonData.success) {",
                                    "        pm.expect(jsonData).to.have.property('session');",
                                    "        pm.expect(jsonData.session).to.have.property('session_token');",
                                    "        pm.expect(jsonData.session).to.have.property('refresh_token');",
                                    "        ",
                                    "        // Update stored tokens",
                                    "        pm.environment.set(\"session_token\", jsonData.session.session_token);",
                                    "        pm.environment.set(\"refresh_token\", jsonData.session.refresh_token);",
                                    "    }",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/auth/session/refresh",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "session",
                                "refresh"
                            ]
                        },
                        "description": "Refresh session using refresh token"
                    }
                },
                {
                    "name": "Get User Sessions",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has sessions array\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('sessions');",
                                    "    pm.expect(jsonData.sessions).to.be.an('array');",
                                    "});",
                                    "",
                                    "pm.test(\"Sessions have required fields\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    if (jsonData.sessions.length > 0) {",
                                    "        var session = jsonData.sessions[0];",
                                    "        pm.expect(session).to.have.property('id');",
                                    "        pm.expect(session).to.have.property('user_id');",
                                    "        pm.expect(session).to.have.property('status');",
                                    "        pm.expect(session).to.have.property('created_at');",
                                    "    }",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/auth/sessions/{{user_id}}?status=active",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "sessions",
                                "{{user_id}}"
                            ],
                            "query": [
                                {
                                    "key": "status",
                                    "value": "active",
                                    "description": "Filter by session status: active, expired, revoked, or remove for all sessions"
                                }
                            ]
                        },
                        "description": "Get sessions for user with optional status filter. Use status=active, status=expired, status=revoked, or remove status param for all sessions"
                    }
                },
                {
                    "name": "Revoke Session",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has success field\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has message\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"session_token\": \"{{session_token}}\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/auth/session/revoke",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "session",
                                "revoke"
                            ]
                        },
                        "description": "Revoke current session"
                    }
                },
                {
                    "name": "Logout Current Session",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has success field\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has message\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/auth/logout",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "logout"
                            ]
                        },
                        "description": "Logout current session - sets session status to EXPIRED"
                    }
                },
                {
                    "name": "Logout From All Devices",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has success field\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has message\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has sessions_revoked count\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('sessions_revoked');",
                                    "    pm.expect(jsonData.sessions_revoked).to.be.a('number');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{session_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/auth/logout-all",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "logout-all"
                            ]
                        },
                        "description": "Logout from all devices - expires all active sessions for current user"
                    }
                },
                {
                    "name": "Admin Logout User by Phone",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has success field\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has message\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "});",
                                    "",
                                    "pm.test(\"Response has sessions_revoked count\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('sessions_revoked');",
                                    "    pm.expect(jsonData.sessions_revoked).to.be.a('number');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{admin_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"phone_number\": \"+1234567890\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/auth/logout-user",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "logout-user"
                            ]
                        },
                        "description": "Admin endpoint to logout a user by phone number - expires all sessions for the specified user"
                    }
                }
            ],
            "description": "Session management operations"
        },
        {
            "name": "Complete Workflow Examples",
            "item": [
                {
                    "name": "Example: Auto-Login Flow (Active User)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// This demonstrates the complete auto-login workflow",
                                    "pm.test(\"Auto-login detection workflow\", function () {",
                                    "    console.log('=== AUTO-LOGIN WORKFLOW EXAMPLE ===');",
                                    "    console.log('1. User sends SendOTP request');",
                                    "    console.log('2. If active within 30 days: response.message = \"AUTO_LOGIN_AVAILABLE\"');",
                                    "    console.log('3. Client sends VerifyOTP with otp_code = \"AUTO_LOGIN\"');",
                                    "    console.log('4. User is immediately logged in with session tokens');",
                                    "    console.log('');",
                                    "    console.log('Benefits:');",
                                    "    console.log('- No SMS costs for returning users');",
                                    "    console.log('- Instant login for frequent users');",
                                    "    console.log('- Maintains security with 30-day limit');",
                                    "    console.log('- Zero breaking changes to existing apps');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/health",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "health"
                            ]
                        },
                        "description": "Example workflow explanation - demonstrates auto-login feature benefits"
                    }
                },
                {
                    "name": "Example: Standard OTP Flow (New User)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// This demonstrates the standard OTP workflow",
                                    "pm.test(\"Standard OTP workflow\", function () {",
                                    "    console.log('=== STANDARD OTP WORKFLOW EXAMPLE ===');",
                                    "    console.log('1. User sends SendOTP request');",
                                    "    console.log('2. For new users or 30+ days inactive: response.message = \"OTP sent successfully\"');",
                                    "    console.log('3. SMS with 6-digit code is sent to user');",
                                    "    console.log('4. Client sends VerifyOTP with the actual OTP code');",
                                    "    console.log('5. User is logged in with session tokens');",
                                    "    console.log('');",
                                    "    console.log('Use cases:');",
                                    "    console.log('- First-time users');",
                                    "    console.log('- Users inactive for 30+ days');",
                                    "    console.log('- Enhanced security for long-inactive accounts');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/health",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "health"
                            ]
                        },
                        "description": "Example workflow explanation - demonstrates standard OTP flow for new/inactive users"
                    }
                }
            ],
            "description": "Comprehensive workflow examples and implementation guidance"
        },
        {
            "name": "Error Cases",
            "item": [
                {
                    "name": "Send OTP - Invalid Phone",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has error information\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('error');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"phone_number\": \"invalid-phone\",\n  \"device_info\": \"Postman Test Client\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/auth/otp/send",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "otp",
                                "send"
                            ]
                        },
                        "description": "Test error handling with invalid phone number"
                    }
                },
                {
                    "name": "Send OTP - Unregistered Phone",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 404\", function () {",
                                    "    pm.response.to.have.status(404);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has error information\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('error');",
                                    "    pm.expect(jsonData.error).to.include('not registered');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"phone_number\": \"+1555000999\",\n  \"device_info\": \"Postman Test Client\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/auth/otp/send",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "otp",
                                "send"
                            ]
                        },
                        "description": "Test error handling with unregistered phone number - should fail"
                    }
                },
                {
                    "name": "Verify OTP - Wrong Code",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400 or 401\", function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
                                    "});",
                                    "",
                                    "pm.test(\"Response indicates failure\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.false;",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"phone_number\": \"+1234567890\",\n  \"otp_code\": \"000000\",\n  \"device_info\": \"Postman Test Client\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/auth/otp/verify",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "otp",
                                "verify"
                            ]
                        },
                        "description": "Test error handling with wrong OTP code"
                    }
                },
                {
                    "name": "Validate Session - No Token",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 401\", function () {",
                                    "    pm.response.to.have.status(401);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has error information\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('error');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"session_token\": \"\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/auth/session/validate",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "session",
                                "validate"
                            ]
                        },
                        "description": "Test error handling with missing authorization"
                    }
                }
            ],
            "description": "Error handling test cases"
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Pre-request script for common setup",
                    "console.log('Testing RallyMate Auth API endpoint: ' + pm.request.url);"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global test script",
                    "pm.test(\"Response time is less than 5000ms\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                    "});",
                    "",
                    "pm.test(\"Response has Content-Type header\", function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                    "});"
                ]
            }
        }
    ],
    "variable": [
        {
            "key": "collection_version",
            "value": "2.0.0",
            "type": "string"
        },
        {
            "key": "auto_login_feature",
            "value": "enabled",
            "type": "string",
            "description": "Auto-login feature for users active within 30 days"
        },
        {
            "key": "last_updated",
            "value": "2025-08-30",
            "type": "string",
            "description": "Date when collection was updated with auto-login features"
        }
    ]
}